diff$Rating2_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating3_term2totalTerm),
diff$Rating3_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating4_term2totalTerm),
diff$Rating4_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating5_term2totalTerm),
diff$Rating5_term2totalTerm,
diff$minValue)
)
)
)
)
diff$vote2 <- ifelse(diff$Rating1_term2totalTerm==diff$minValue2,
1,
ifelse(diff$Rating2_term2totalTerm==diff$minValue2,
2,
ifelse(diff$Rating3_term2totalTerm==diff$minValue2,
3,
ifelse(diff$Rating4_term2totalTerm==diff$minValue2,
4,
5)
)
)
)
diff
bestVote <- diff %>% group_by(vote) %>% count()
bestVote$maxVote <- ifelse(bestVote$n==max(bestVote$n),
1,0)
bestVote$ratingMean <- ifelse(sum(bestVote$maxVote) > 1,
ifelse(ceiling(mean(bestVote$vote*bestVote$n))>5,
5, ceiling(mean(bestVote$vote*bestVote$n))),
ifelse(bestVote$n==max(bestVote$n),
bestVote$vote,
0)
)
bestVote$ratingMedian <- ifelse(sum(bestVote$maxVote) > 1,
ifelse(ceiling(median(bestVote$vote*bestVote$n))>5,
5,ceiling(median(bestVote$vote*bestVote$n))),
ifelse(bestVote$n==max(bestVote$n),
bestVote$vote,
0)
)
max(bestVote$ratingMean)
max(bestVote$ratingMedian)
bestVote
bestVote2 <- diff %>% group_by(vote2) %>% count()
bestVote2$maxVote2 <- ifelse(bestVote2$n==max(bestVote2$n),
1,0)
bestVote2$ratingMean2 <- ifelse(sum(bestVote2$maxVote2) > 1,
ifelse(ceiling(mean(bestVote2$vote2*bestVote2$n))>5,
5, ceiling(mean(bestVote2$vote2*bestVote2$n))),
ifelse(bestVote2$n==max(bestVote2$n),
bestVote2$vote2,
0)
)
bestVote2$ratingMedian2 <- ifelse(sum(bestVote2$maxVote2) > 1,
ifelse(ceiling(median(bestVote2$vote2*bestVote2$n))>5,
5,ceiling(median(bestVote2$vote2*bestVote2$n))),
ifelse(bestVote2$n==max(bestVote2$n),
bestVote2$vote2,
0)
)
max(bestVote2$ratingMean2)
max(bestVote2$ratingMedian2)
bestVote2
Reviews13[2,]
str1 <- as.character(paste(Reviews13$userReviewOnlyContent[600]))
str1 <- gsub('[!|.|,|\n|\']',' ',str1,perl=TRUE)
str1 <- gsub('[  ]',' ',str1)
str1 <- trimws(str1, which=c('both'), whitespace='[\t\r\n ]')
totalTerms <- length((strsplit(str1, split=' ')[[1]]))
keys <- row.names(keys_t)
and <- str_match_all(str1,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(str1,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(str1,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(str1,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(str1,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(str1,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(str1,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(str1,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(str1,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(str1,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(str1,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(str1,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values <- as.data.frame(c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH))
row.names(values) <- keys
keyValues <- as.data.frame(t(values))
keyValues2 <- keyValues/totalTerms
keyValues3 <- rbind(keyValues,keyValues2)
row.names(keyValues3) <- c('documentTermCount','term_to_totalDocumentTerms')
keyValues3 <- round(keyValues3,3)
keyValues3
joinKeys <- full_join(wordToAllWords,keyValues3)
r1 <- row.names(wordToAllWords)
r2 <- row.names(keyValues3)
names <- c(r1,r2)
row.names(joinKeys) <- names
joinKeys
and_diff <- joinKeys$and[1:5]-joinKeys$and[7]
but_diff <- joinKeys$but[1:5]-joinKeys$but[7]
for_diff <- joinKeys[1:5,3]-joinKeys[7,3]
good_diff <- joinKeys$good[1:5]-joinKeys$good[7]
have_diff <- joinKeys$have[1:5]-joinKeys$have[7]
not_diff <- joinKeys$not[1:5]-joinKeys$not[7]
that_diff <- joinKeys$that[1:5]-joinKeys$that[7]
the_diff <- joinKeys$the[1:5]-joinKeys$the[7]
they_diff <- joinKeys$they[1:5]-joinKeys$they[7]
this_diff <- joinKeys$this[1:5]-joinKeys$this[7]
with_diff <- joinKeys$with[1:5]-joinKeys$with[7]
you_diff <- joinKeys$you[1:5]-joinKeys$you[7]
diff <- as.data.frame(t(cbind(and_diff, but_diff, for_diff, good_diff, have_diff, not_diff,
that_diff, the_diff, they_diff, this_diff, with_diff, you_diff)))
colnames(diff) <- r1
diff$minValue <- apply(diff,1, min)
diff$vote <- ifelse(diff$Rating1_term2totalTerm==diff$minValue,
1,
ifelse(diff$Rating2_term2totalTerm==diff$minValue,
2,
ifelse(diff$Rating3_term2totalTerm==diff$minValue,
3,
ifelse(diff$Rating4_term2totalTerm==diff$minValue,
4,
5)
)
)
)
diff$minValue2 <- ifelse(abs(diff$minValue)>abs(diff$Rating1_term2totalTerm),
diff$Rating1_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating2_term2totalTerm),
diff$Rating2_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating3_term2totalTerm),
diff$Rating3_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating4_term2totalTerm),
diff$Rating4_term2totalTerm,
ifelse(abs(diff$minValue)>abs(diff$Rating5_term2totalTerm),
diff$Rating5_term2totalTerm,
diff$minValue)
)
)
)
)
diff$vote2 <- ifelse(diff$Rating1_term2totalTerm==diff$minValue2,
1,
ifelse(diff$Rating2_term2totalTerm==diff$minValue2,
2,
ifelse(diff$Rating3_term2totalTerm==diff$minValue2,
3,
ifelse(diff$Rating4_term2totalTerm==diff$minValue2,
4,
5)
)
)
)
diff
bestVote <- diff %>% group_by(vote) %>% count()
bestVote$maxVote <- ifelse(bestVote$n==max(bestVote$n),
1,0)
bestVote$ratingMean <- ifelse(sum(bestVote$maxVote) > 1,
ifelse(ceiling(mean(bestVote$vote*bestVote$n))>5,
5, ceiling(mean(bestVote$vote*bestVote$n))),
ifelse(bestVote$n==max(bestVote$n),
bestVote$vote,
0)
)
bestVote$ratingMedian <- ifelse(sum(bestVote$maxVote) > 1,
ifelse(ceiling(median(bestVote$vote*bestVote$n))>5,
5,ceiling(median(bestVote$vote*bestVote$n))),
ifelse(bestVote$n==max(bestVote$n),
bestVote$vote,
0)
)
max(bestVote$ratingMean)
max(bestVote$ratingMedian)
bestVote
bestVote2 <- diff %>% group_by(vote2) %>% count()
bestVote2$maxVote2 <- ifelse(bestVote2$n==max(bestVote2$n),
1,0)
bestVote2$ratingMean2 <- ifelse(sum(bestVote2$maxVote2) > 1,
ifelse(ceiling(mean(bestVote2$vote2*bestVote2$n))>5,
5, ceiling(mean(bestVote2$vote2*bestVote2$n))),
ifelse(bestVote2$n==max(bestVote2$n),
bestVote2$vote2,
0)
)
bestVote2$ratingMedian2 <- ifelse(sum(bestVote2$maxVote2) > 1,
ifelse(ceiling(median(bestVote2$vote2*bestVote2$n))>5,
5,ceiling(median(bestVote2$vote2*bestVote2$n))),
ifelse(bestVote2$n==max(bestVote2$n),
bestVote2$vote2,
0)
)
max(bestVote2$ratingMean2)
max(bestVote2$ratingMedian2)
bestVote2
Reviews13[600,]
head(Reviews13)
class(Reviews13$Date)
Reviews13$Date <- as.Date(Reviews13$Date)
class(Reviews13$Date)
date <- ymd(Reviews13$Date)
date <- day(Reviews13$Date)
Reviews13$weekday <- wday(date, label=TRUE, week_start=1)#set start of week to Monday)
head(Reviews13$weekday)
str1 <- as.character(paste(Reviews13$userReviewOnlyContent[600]))
str1 <- gsub('[!|.|,|\n|\']',' ',str1,perl=TRUE)
str1 <- gsub('[  ]',' ',str1)
str1 <- trimws(str1, which=c('both'), whitespace='[\t\r\n ]')
totalTerms <- length((strsplit(str1, split=' ')[[1]]))
keys <- row.names(keys_t)
and <- str_match_all(str1,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(str1,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(str1,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(str1,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(str1,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(str1,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(str1,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(str1,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(str1,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(str1,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(str1,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(str1,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values <- as.data.frame(c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH))
row.names(values) <- keys
keyValues <- as.data.frame(t(values))
keyValues2 <- keyValues/totalTerms
keyValues3 <- rbind(keyValues,keyValues2)
row.names(keyValues3) <- c('documentTermCount','term_to_totalDocumentTerms')
keyValues3 <- round(keyValues3,3)
keyValues3
row.names(Reviews13) <- NULL
row.names(Reviews13) <- as.character(paste(row.names(Reviews13)))
head(row.names(Reviews13))
for (review in (str$review))
{
s <- gsub('[!|.|,|\n|\']',' ',str,perl=TRUE)
s <- gsub('[  ]',' ',s)
s <- trimws(s, which=c('both'), whitespace='[\t\r\n ]')
s <- strsplit(s, split=' ') #this is where the error is, outside the loop is fine
totalTerms <- length(s[[1]])
and <- str_match_all(s,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(s,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(s,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(s,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(s,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(s,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(s,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(s,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(s,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(s,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(s,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(s,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values1 <- c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH)
values2 <- Values1/totalTerms
##cat function to save the values and work out another way to read in and combine
#cat(values1,file="values1.csv",sep="\n",append ="TRUE",fill=TRUE)
#cat(values2,file="values2.csv",sep="\n",append ="TRUE",fill=TRUE)
}
for (review in (str$review))
{
s <- gsub('[!|.|,|\n|\']',' ',str,perl=TRUE)
s <- gsub('[  ]',' ',s)
s <- trimws(s, which=c('both'), whitespace='[\t\r\n ]')
# s <- strsplit(s, split=' ') #this is where the error is, outside the loop is fine
totalTerms <- length(strsplit(s, split=' ')[[1]])
and <- str_match_all(s,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(s,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(s,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(s,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(s,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(s,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(s,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(s,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(s,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(s,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(s,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(s,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values1 <- c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH)
values2 <- Values1/totalTerms
##cat function to save the values and work out another way to read in and combine
cat(values1,file="values1.csv",sep="\n",append ="TRUE",fill=TRUE)
cat(values2,file="values2.csv",sep="\n",append ="TRUE",fill=TRUE)
}
str <- as.character(paste(Reviews13$userReviewOnlyContent))
for (review in (str))
{
s <- gsub('[!|.|,|\n|\']',' ',str,perl=TRUE)
s <- gsub('[  ]',' ',s)
s <- trimws(s, which=c('both'), whitespace='[\t\r\n ]')
# s <- strsplit(s, split=' ') #this is where the error is, outside the loop is fine
totalTerms <- length(strsplit(s, split=' ')[[1]])
and <- str_match_all(s,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(s,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(s,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(s,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(s,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(s,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(s,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(s,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(s,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(s,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(s,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(s,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values1 <- c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH)
values2 <- Values1/totalTerms
##cat function to save the values and work out another way to read in and combine
cat(values1,file="values1.csv",sep="\n",append ="TRUE",fill=TRUE)
cat(values2,file="values2.csv",sep="\n",append ="TRUE",fill=TRUE)
}
str <- as.character(paste(Reviews13$userReviewOnlyContent))
for (review in (str))
{
s <- gsub('[!|.|,|\n|\']',' ',review,perl=TRUE)
s <- gsub('[  ]',' ',s)
s <- trimws(s, which=c('both'), whitespace='[\t\r\n ]')
# s <- strsplit(s, split=' ') #this is where the error is, outside the loop is fine
totalTerms <- length(strsplit(s, split=' ')[[1]])
and <- str_match_all(s,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(s,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(s,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(s,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(s,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(s,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(s,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(s,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(s,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(s,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(s,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(s,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values1 <- c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH)
values2 <- Values1/totalTerms
##cat function to save the values and work out another way to read in and combine
cat(values1,file="values1.csv",sep="\n",append ="TRUE",fill=TRUE)
cat(values2,file="values2.csv",sep="\n",append ="TRUE",fill=TRUE)
}
str <- as.character(paste(Reviews13$userReviewOnlyContent))
for (review in (str))
{
s <- gsub('[!|.|,|\n|\']',' ',review,perl=TRUE)
s <- gsub('[  ]',' ',s)
s <- trimws(s, which=c('both'), whitespace='[\t\r\n ]')
# s <- strsplit(s, split=' ') #this is where the error is, outside the loop is fine
totalTerms <- length(strsplit(s, split=' ')[[1]])
and <- str_match_all(s,' [aA][nN][dD] ')
AND <- length(and[[1]])
the <- str_match_all(s,' [tT][hH][eE] ')
THE <- length(the[[1]])
for1 <- str_match_all(s,' [fF][oO][rR] ')
FOR1 <- length(for1[[1]])
have <- str_match_all(s,' [hH][aA][vV][eE] ')
HAVE <- length(have[[1]])
that <- str_match_all(s,' [tT][hH][aA][tT] ')
THAT <- length(that[[1]])
they <- str_match_all(s,' [tT][hH][eE][yY] ')
THEY <- length(they[[1]])
this <- str_match_all(s,' [tT][hH][iI][sS] ')
THIS <- length(this[[1]])
you <- str_match_all(s,' [yY][oO][uU] ')
YOU <- length(you[[1]])
not <- str_match_all(s,' [nN][oO][tT] ')
NOT <- length(not[[1]])
but <- str_match_all(s,' [bB][uU][tT] ')
BUT <- length(but[[1]])
good <- str_match_all(s,' [gG][oO][oO][dD] ')
GOOD <- length(good[[1]])
with <- str_match_all(s,' [wW][iI][tT][hH] ')
WITH <- length(with[[1]])
values1 <- c(THE,AND,FOR1,HAVE,THAT,THEY,THIS,YOU,NOT,BUT,GOOD,WITH)
values2 <- values1/totalTerms
##cat function to save the values and work out another way to read in and combine
cat(values1,file="values1.csv",sep="\n",append ="TRUE",fill=TRUE)
cat(values2,file="values2.csv",sep="\n",append ="TRUE",fill=TRUE)
}
#loop fails at the splitstr function.
visNodes <- Reviews13 %>% select(userRatingValue,LowAvgHighCost, businessType,weekday)
visNodes$label <- visNodes$userRatingValue
visNodes$label <- paste('rate',visNodes$label,sep='')
visNodes$title <- visNodes$LowAvgHighCost
visNodes$title <- paste(visNodes$title,'Cost',sep='')
visNodes$group <- visNodes$weekday
visEdges <- as.data.frame(t(wordToAllWords ))
colnames(visEdges) <- c('rate1','rate2','rate3','rate4','rate5')
visEdges$label <- row.names(visEdges)
#the weight is the ratio term2alltermsPerRating
visEdges <- gather(visEdges, 'rating','weight', 1:5)
head(visNodes)
Nodes1 <- visNodes %>% select(label,title,group)
head(Nodes1)
Nodes2 <- merge(Nodes1, visEdges, by.x='label', by.y='rating')
Nodes2$term <- Nodes2$label.y
Nodes2$id <- row.names(Nodes2)
Nodes3 <- Nodes2 %>% select(id,label,title,group,term)
head(Nodes3)
head(visEdges)
Edges2 <- visEdges %>% mutate(from=plyr::mapvalues(visEdges$rating,
from=Nodes3$label,to=Nodes3$id))
Edges3 <- Edges2 %>% mutate(to=plyr::mapvalues(Edges2$label,
from=Nodes3$term, to=Nodes3$id))
Edges4 <- Edges3 %>% select(from,to,label,weight)
head(Edges4)
Nodes2 <- merge(Nodes1, visEdges, by.x='label', by.y='rating')
Nodes2$term <- Nodes2$label.y
Nodes2$id <- row.names(Nodes2)
Nodes3 <- Nodes2 %>% select(id,label,title,group,term)
Nodes3$label <- as.factor(paste(Nodes3$label))
Nodes3$term <-  as.factor(paste(Nodes3$term))
Nodes3$title <- as.factor(paste(Nodes3$title))
head(Nodes3)
Nodes2 <- merge(Nodes1, visEdges, by.x='label', by.y='rating')
Nodes2$term <- Nodes2$label.y
Nodes2$id <- as.factor(paste(row.names(Nodes2)))
Nodes3 <- Nodes2 %>% select(id,label,title,group,term)
Nodes3$label <- as.factor(paste(Nodes3$label))
Nodes3$term <-  as.factor(paste(Nodes3$term))
Nodes3$title <- as.factor(paste(Nodes3$title))
head(Nodes3)
visEdges$label <- as.factor(paste(visEdges$label))
visEdges$rating <- as.factor(paste(visEdges$rating))
head(visEdges)
Edges2 <- visEdges %>% mutate(from=plyr::mapvalues(visEdges$rating,
from=Nodes3$label,to=Nodes3$id))
Edges3 <- Edges2 %>% mutate(to=plyr::mapvalues(Edges2$label,
from=Nodes3$term, to=Nodes3$id))
Edges4 <- Edges3 %>% select(from,to,label,weight)
head(Edges4)
Edges2 <- visEdges %>% mutate(from=plyr::mapvalues(visEdges$rating,
from=Nodes3$label,to=Nodes3$id))
visEdges$label
visEdges$rating
Nodes3$label
unique(Nodes3$id)
Nodes1 <- visNodes %>% select(label,title,group)
Nodes1$id <- as.factor(paste(Nodes1$id))
Nodes1 <- visNodes %>% select(label,title,group)
Nodes1$id <- as.factor(paste(row.names(Nodes1)))
head(Nodes1)
Nodes2 <- merge(Nodes1, visEdges, by.x='label', by.y='rating')
Nodes2$id <- unique(Nodes2$id)
View(Nodes2)
Nodes1 <- visNodes %>% select(label,title,group)
head(Nodes1)
